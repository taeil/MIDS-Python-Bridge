First of all, the concept of codes as a cost to maintain is very inspiring. In my work experience, we have a tendency to throw away whole codes, in other words, to start writing a new version from scratch. I have seen so many times for the products in our company. The management team expects a lot better products and the engineers expect a lot cleaner architecture and cleaner code. In the end, it takes a lot longer to replace existing customers who deployed the old version by the new version. The team is pressured to the release next version as early as possible primarily because of the cost maintaining multiple versions. The initial release of the product has less functionality than the old version partially because all the functions with the old version are not well documented as the requirements. Additionally, all the corner cases that were handled with the old versions are not well covered by the new version of the product even with the extensive test cases. In a perfect world, every small and big requirement is documented and every test cases are automated or documented. However, the reality is far from the perfect world. Therefore, I found many customers who tried to upgrade to the newer version disappointed with the newer version and sometimes rollback to the old version after their bad experience with the newer version. Once they gave up upgrading to a newer version, we found ourself a lot harder to convince them to try again even after addressing all the issue. To make it worse, the new version of the product becomes easily an old product already with the similar reasons why we started the newer version at the first place. Consequently, the management team starts to discuss the next version by a new team. I have always believed that we will repeat same mistakes over and over unless we understand the underlying issues regarding to how we design and how we write codes. Regarding the article, reusability and the cost for maintenance mentioned is how to increase the life expectancy of the specific version of the product before it is written from scratch. 
Second, the style guide provides a good foundation especially for learning Python. I have been a very strong believer in code readability but I have not seen enough emphasis while learning and using other programming languages in the communities. I am very happy to see that code readability is taken with high priority which I believe can be achieved relatively easily with minimum disciplines. The most of the items in the style guide are intuitive so it is pretty easy to “memorize”.